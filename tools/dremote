#!/usr/bin/env python3
import os
import sys
import json
import subprocess
from pathlib import Path

SERVERS_CONFIG = "/config/servers.json"
MOUNT_BASE = "/mnt/sshfs"
SSH_KEY_PATH = "/home/devuser/.ssh/id_rsa"

def get_current_mount():
    """Find which SSHFS mount we're currently in"""
    cwd = Path(os.getcwd())
    mount_base = Path(MOUNT_BASE)
    
    try:
        if not str(cwd).startswith(str(mount_base)):
            return None, None

        relative = cwd.relative_to(mount_base)
        project_name = relative.parts[0]
        
        if len(relative.parts) > 1:
            relative_path = str(Path(*relative.parts[1:]))
        else:
            relative_path = "."
            
        return project_name, relative_path
            
    except Exception as e:
        print(f"Debug: Error in get_current_mount: {e}", file=sys.stderr)
        return None, None

def get_server_config(project_name):
    """Get server configuration from servers.json"""
    try:
        with open(SERVERS_CONFIG) as f:
            config = json.load(f)
            for server in config.get("servers", []):
                if server.get("name") == project_name:
                    return server
    except Exception as e:
        print(f"Error reading server config: {e}", file=sys.stderr)
    return None

def main():
    if len(sys.argv) < 2:
        print("Usage: dremote <command>", file=sys.stderr)
        sys.exit(1)

    # Get current mount point and relative path
    project_name, relative_path = get_current_mount()
    if not project_name:
        print("Error: Not in an SSHFS mount", file=sys.stderr)
        sys.exit(1)

    # Get server configuration
    server = get_server_config(project_name)
    if not server:
        print(f"Error: No configuration found for {project_name}", file=sys.stderr)
        sys.exit(1)

    # Build the remote path by combining server's remote_path with our relative path
    remote_base = str(server.get("remote_path", "/")).rstrip("/")
    if relative_path and relative_path != ".":
        remote_path = str(Path(remote_base) / relative_path)
    else:
        remote_path = remote_base

    # Build SSH command
    host = server["host"]
    user = server.get("user", "devuser")
    port = server.get("port")
    password = server.get("password")

    # Simple command that changes directory and executes the user command
    remote_cmd = f"cd {remote_path} 2>/dev/null && {' '.join(sys.argv[1:])}"

    # Build base SSH command
    ssh_cmd = ["ssh", "-T"]  # No pseudo-terminal
    if port:
        ssh_cmd.extend(["-p", str(port)])
    if not password:
        ssh_cmd.extend(["-i", SSH_KEY_PATH])
    ssh_cmd.extend([
        "-o", "StrictHostKeyChecking=no",
        f"{user}@{host}",
        remote_cmd
    ])
        
    try:
        if password:
            final_cmd = ["sshpass", "-p", password] + ssh_cmd
            subprocess.run(final_cmd, check=True)
        else:
            subprocess.run(ssh_cmd, check=True)
    except subprocess.CalledProcessError as e:
        sys.exit(e.returncode)

if __name__ == "__main__":
    main()